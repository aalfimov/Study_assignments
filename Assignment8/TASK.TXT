Условие задачи:
Первая часть задачи:
изначально вверху окна должен быть ряд из черных квадратов.
При клике на любой из них, под ним должен появиться еще один такой же квадрат (т.е.
получим столбик из двух квадратов).
Теперь, при клике на любой квадрат в столбике этот столбик должен стать длинее ещё на один квадрат.
Таким образом, кликая на разные квадраты можно растить столбткию

Вторая часть задачи:
когда какой-либо из столбиков по длине превышает 3 квадрата, он должен начать
переливаться. Это значит, что его квадратики должны по очереди переключаться на
зелёный цвет. В любой момент времени в любом столбике длинной больше 3х
квадратов должно быть много чёрных квадратов и один зелёный.

Что получилось:
Сознаю двумерный масив dataObjects[][] с кубами. Первый ряд крашу в черный, остальные в белый.
При нажатии мышки на куб, вычисляю по координате X в каком столбце нужно добавить еще куб.
Метод greenLight() исчет в массиве Зеленый куб и меняет цвет со следующим черным кубом.

Что не получилось:
Количесво кубов можно указать в константе, однако при количестве больше 10, алгоритм не правильно вычисляет столбец.
Для правильной работы нужно проводить сравнение каждого элемента масива с selectedObject.

Как подошли к организации своей работы:
Поставил перед собой такие задачи:
1. создать обьекты.
2. реализовать метод, что будет следить за кликом мышки.
3. реализовать метод, что будет перемещать зеленый цвет по столбику (если в столбике больше 3-х кубов).

Какие стратегические решения вы приняли:
Сразу решил создать все необходимые елементы, а те, что не нужны в данный момент, закрасить белым.
В дальнейшем работать исключительно со сменой цвета.
Основной проблемой было определить в какой колонке находится обьект после нажатия мышки.
Для решения этого написал:
int line = (int) selectedObject.getX() % BRICK_WIDTH / 2;
Это помогло определить правильный столбец в масиве.

Слабые места кода, сильные места кода:
Сильные места кода в переменных, что позволяют изменять входные характеристики программы.
Есть проверки на различные выходы за пределы масива. Код оптимизован.
Слабые места в том, что не все входные данные можно изменять вольно. Количество кубов ограничено.

Общая структура кода:
1.Создание обьектов.
2.Проверка кликнутых столбцов.
3.Перемещение зеленого цвета по столбцу.